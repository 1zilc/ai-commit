import { i18n, I18nLocals } from './i18n';
import { ConfigKeys, getConfig } from './config';
import { removeConventionalCommitWord } from './utils';

/**
 * Retrieves the current language setting from the configuration.
 * @constant {string} language - The language for commit messages.
 * @constant {boolean} emoji_enabled - Flag indicating if emojis are enabled.
 * @constant {boolean} fullGitMojiSpec - Flag indicating if full GitMoji specification is used.
 */
const language = getConfig<string>(ConfigKeys.AI_COMMIT_LANGUAGE);
const emoji_enabled = getConfig<boolean>(ConfigKeys.EMOJI_ENABLED);
const fullGitMojiSpec = getConfig<boolean>(ConfigKeys.FULL_GITMOJI_SPEC);

/**
 * Retrieves the translation for the specified language.
 * @constant {I18nLocals} translation - The translation object for the current language.
 */
const translation = i18n[(language as I18nLocals) || 'en'];

/**
 * The identity prompt for the AI commit message generator.
 * @constant {string} IDENTITY - The identity description for the AI.
 */
export const IDENTITY = 'You are to act as the author of a commit message in git.';

/**
 * Initializes the main prompt for generating commit messages.
 * 
 * @param {string} language - The language to be used in the prompt.
 * @returns {Object} - The main prompt object containing role and content.
 */
const INIT_MAIN_PROMPT = (language: string) => ({
  role: 'system',
  content: `${IDENTITY} Your mission is to create clean and comprehensive commit messages as per the ${
    fullGitMojiSpec ? 'GitMoji specification' : 'conventional commit convention'
  } and explain WHAT were the changes and mainly WHY the changes were done. I'll send you an output of 'git diff --staged' command, and you are to convert it into a commit message.
    ${
      emoji_enabled
        ? 'Use GitMoji convention to preface the commit. Here are some help to choose the right emoji (emoji, description): ' +
          'üêõ, Fix a bug; ' +
          '‚ú®, Introduce new features; ' +
          'üìù, Add or update documentation; ' +
          'üöÄ, Deploy stuff; ' +
          '‚úÖ, Add, update, or pass tests; ' +
          '‚ôªÔ∏è, Refactor code; ' +
          '‚¨ÜÔ∏è, Upgrade dependencies; ' +
          'üîß, Add or update configuration files; ' +
          'üåê, Internationalization and localization; ' +
          'üí°, Add or update comments in source code; ' +
          `${
            fullGitMojiSpec
              ? 'üé®, Improve structure / format of the code; ' +
                '‚ö°Ô∏è, Improve performance; ' +
                'üî•, Remove code or files; ' +
                'üöëÔ∏è, Critical hotfix; ' +
                'üíÑ, Add or update the UI and style files; ' +
                'üéâ, Begin a project; ' +
                'üîíÔ∏è, Fix security issues; ' +
                'üîê, Add or update secrets; ' +
                'üîñ, Release / Version tags; ' +
                'üö®, Fix compiler / linter warnings; ' +
                'üöß, Work in progress; ' +
                'üíö, Fix CI Build; ' +
                '‚¨áÔ∏è, Downgrade dependencies; ' +
                'üìå, Pin dependencies to specific versions; ' +
                'üë∑, Add or update CI build system; ' +
                'üìà, Add or update analytics or track code; ' +
                '‚ûï, Add a dependency; ' +
                '‚ûñ, Remove a dependency; ' +
                'üî®, Add or update development scripts; ' +
                '‚úèÔ∏è, Fix typos; ' +
                'üí©, Write bad code that needs to be improved; ' +
                '‚è™Ô∏è, Revert changes; ' +
                'üîÄ, Merge branches; ' +
                'üì¶Ô∏è, Add or update compiled files or packages; ' +
                'üëΩÔ∏è, Update code due to external API changes; ' +
                'üöö, Move or rename resources (e.g.: files, paths, routes); ' +
                'üìÑ, Add or update license; ' +
                'üí•, Introduce breaking changes; ' +
                'üç±, Add or update assets; ' +
                '‚ôøÔ∏è, Improve accessibility; ' +
                'üçª, Write code drunkenly; ' +
                'üí¨, Add or update text and literals; ' +
                'üóÉÔ∏è, Perform database related changes; ' +
                'üîä, Add or update logs; ' +
                'üîá, Remove logs; ' +
                'üë•, Add or update contributor(s); ' +
                'üö∏, Improve user experience / usability; ' +
                'üèóÔ∏è, Make architectural changes; ' +
                'üì±, Work on responsive design; ' +
                'ü§°, Mock things; ' +
                'ü•ö, Add or update an easter egg; ' +
                'üôà, Add or update a .gitignore file; ' +
                'üì∏, Add or update snapshots; ' +
                '‚öóÔ∏è, Perform experiments; ' +
                'üîçÔ∏è, Improve SEO; ' +
                'üè∑Ô∏è, Add or update types; ' +
                'üå±, Add or update seed files; ' +
                'üö©, Add, update, or remove feature flags; ' +
                'ü•Ö, Catch errors; ' +
                'üí´, Add or update animations and transitions; ' +
                'üóëÔ∏è, Deprecate code that needs to be cleaned up; ' +
                'üõÇ, Work on code related to authorization, roles and permissions; ' +
                'ü©π, Simple fix for a non-critical issue; ' +
                'üßê, Data exploration/inspection; ' +
                '‚ö∞Ô∏è, Remove dead code; ' +
                'üß™, Add a failing test; ' +
                'üëî, Add or update business logic; ' +
                'ü©∫, Add or update healthcheck; ' +
                'üß±, Infrastructure related changes; ' +
                'üßë‚Äçüíª, Improve developer experience; ' +
                'üí∏, Add sponsorships or money related infrastructure; ' +
                'üßµ, Add or update code related to multithreading or concurrency; ' +
                'ü¶∫, Add or update code related to validation.'
              : ''
          }`
        : 'Do not preface the commit with anything. Conventional commit keywords:' +
          'fix, feat, build, chore, ci, docs, style, refactor, perf, test.'
    }\nDon't add any descriptions to the commit, only commit message.\nUse the present tense. Lines must not be longer than 74 characters. Use ${language} for the commit message.`
});

/**
 * Initializes the diff prompt for generating commit messages based on the provided diff.
 * 
 * @type {Object} INIT_DIFF_PROMPT - The prompt object for the user role containing the diff content.
 */
export const INIT_DIFF_PROMPT = {
  role: 'user',
  content: `diff --git a/src/server.ts b/src/server.ts
      index ad4db42..f3b18a9 100644
      --- a/src/server.ts
      +++ b/src/server.ts
      @@ -10,7 +10,7 @@
      import {
          initWinstonLogger();
          
          const app = express();
          -const port = 7799;
          +const PORT = 7799;
          
          app.use(express.json());
          
          @@ -34,6 +34,6 @@
          app.use((_, res, next) => {
              // ROUTES
              app.use(PROTECTED_ROUTER_URL, protectedRouter);
              
              -app.listen(port, () => {
                  -  console.log(\`Server listening on port \${port}\`);
                  +app.listen(process.env.PORT || PORT, () => {
                      +  console.log(\`Server listening on port \${PORT}\`);
                  });`
};

/**
 * Initializes the consistency prompt for generating commit messages.
 * 
 * @param {Object} translation - The translation object containing commit message templates.
 * @returns {Object} - The consistency prompt object containing role and content.
 */
const INIT_CONSISTENCY_PROMPT = (translation) => ({
  role: 'assistant',
  content: `${
    emoji_enabled
      ? `üêõ ${removeConventionalCommitWord(translation.commitFix)}`
      : translation.commitFix
  }
  ${
    emoji_enabled
      ? `‚ú® ${removeConventionalCommitWord(translation.commitFeat)}`
      : translation.commitFeat
  }
`
});

/**
 * Retrieves the main commit prompt, including the main prompt, diff prompt, and consistency prompt.
 * 
 * @returns {Promise<Array<Object>>} - A promise that resolves to an array of prompts for generating commit messages.
 */
export const getMainCommitPrompt = async () => {
  return [
    INIT_MAIN_PROMPT(translation.localLanguage),
    INIT_DIFF_PROMPT,
    INIT_CONSISTENCY_PROMPT(translation)
  ];
};
